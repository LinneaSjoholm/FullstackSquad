service: take-away-backend

frameworkVersion: "4"

provider:
  name: aws
  runtime: nodejs18.x
  region: eu-north-1
  environment:
    API_KEY: ${env:API_KEY}  

  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:BatchGetItem
          Resource: "*"

functions:
  getMenu:
    handler: src/handlers/getMenu.getMenu
    events:
      - httpApi:
          path: /menu
          method: get

  postOrder:
    handler: src/handlers/postOrder.postOrder
    events:
      - httpApi:
          path: /order
          method: post

  getOrder:
    handler: src/handlers/getOrder.getOrder
    events:
      - httpApi:
          path: /order/{id}
          method: get

  getOrderReview:
    handler: src/handlers/getOrderReview.getOrderReview
    events:
      - httpApi:
          path: /order/review/{id}
          method: get

  putReviewOrder:
    handler: src/handlers/putReviewOrder.putReviewOrder
    events:
      - httpApi:
          path: /order/{id}/update
          method: post

  # Get the stock status for all ingredients
  getStockStatus:
    handler: src/handlers/getStockStatus.getStockStatus
    events:
      - httpApi:
          path: /admin/stock-status
          method: get

  # Get all orders for admin
  adminGetOrders:
    handler: src/handlers/adminGetOrders.adminGetOrders
    events:
      - httpApi:
          path: /admin/orders
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - x-api-key
            methods:
              - GET
              - OPTIONS

  # Update order details (admin/employees)
  updateOrderDetails:
    handler: src/handlers/adminUpdateOrderDetails.adminUpdateOrder
    events:
      - httpApi:
          path: /admin/order/{id}
          method: patch

  adminMarkOrderAsCompleted:
    handler: src/handlers/adminMarkOrderAsCompleted.adminMarkOrderAsCompleted
    events:
      - http:
          path: /admin/order/{id}/mark-as-completed
          method: post
          cors: true

  adminLockOrder:
    handler: src/handlers/adminLockOrder.adminLockOrder
    events:
      - http:
          path: /admin/order/{id}/lock
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Amz-Security-Token
              - x-api-key
            methods:
              - POST
              - OPTIONS
          

  # Cancel an order (before it is locked)
  deleteCancelOrder:  
    handler: src/handlers/cancelOrder.cancelOrder  
    events:
      - httpApi:
          path: /order/{id}/cancel
          method: delete  

  initData:
    handler: src/handlers/initData.initData
    events:
      - httpApi:
          path: /order/reviewOrder/{id}
          method: put
          cors: true

  deleteOrder:  
    handler: src/handlers/deleteOrder.deleteOrder
    events:
      - httpApi:
          path: /order/delete/{id}
          method: delete
          cors: true

  putMenuAdmin:
    handler: src/handlers/putMenuAdmin.putMenuAdmin
    events:
      - httpApi:
          path: /menu/admin
          method: put
          cors: true
          headers:
            x-api-key: true  

resources:
  Resources:
    IngredientsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: IngredientsTable  # Tabell f√∂r ingredienser
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"  
        BillingMode: PAY_PER_REQUEST

    MenuTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: MenuTable
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"
        BillingMode: PAY_PER_REQUEST

    OrdersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: OrdersTable
        AttributeDefinitions:
          - AttributeName: "orderId"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "orderId"
            KeyType: "HASH"
        BillingMode: PAY_PER_REQUEST

custom:
  esbuild:
    target: 'node18'
    sourcemap: true
    minify: false
    bundle: true
    loader:
      '.ts': 'ts'
      '.tsx': 'tsx'

  serverless-offline:
    cors:
      allowOrigins:
        - "*"
      allowHeaders:
        - Content-Type
        - x-api-key
      allowMethods:
        - GET
        - POST
        - PATCH
        - DELETE 
        - PUT
        - OPTIONS