service: take-away-backend

frameworkVersion: "4"

provider:
  name: aws
  runtime: nodejs18.x
  region: eu-north-1
  environment:
    API_KEY: ${env:API_KEY}
    USERS_TABLE: UsersTable
    PAYMENTS_TABLE: Payments
    JWT_SECRET: ${env:JWT_SECRET}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:BatchGetItem
            - dynamodb:BatchWriteItem 
          Resource: 
            - '*'

functions:
  getMenu:
    handler: src/handlers/getMenu.getMenu
    events:
      - httpApi:
          path: /menu
          method: get
          cors: true

  getAbout:
    handler: src/handlers/getAbout.handler
    events:
      - httpApi:
          path: /about
          method: get

  getConfirmation:
    handler: src/handlers/getConfirmation.handler
    events:
      - httpApi:
          path: /confirmation/{id}
          method: get

  getContact:
    handler: src/handlers/getContact.handler
    events:
      - httpApi:
          path: /contact
          method: get

  postOrder:
    handler: src/handlers/postOrder.postOrder
    events:
      - httpApi:
          path: /order
          method: post

  getOrder:
    handler: src/handlers/getOrder.getOrder
    events:
      - httpApi:
          path: /order/{id}
          method: get

  getOrderReview:
    handler: src/handlers/getOrderReview.getOrderReview
    events:
      - httpApi:
          path: /order/review/{id}
          method: get

  putReviewOrder:
    handler: src/handlers/putReviewOrder.putReviewOrder
    events:
      - httpApi:
          path: /order/reviewOrder/{id}
          method: put

  getStockStatus:
    handler: src/handlers/getStockStatus.getStockStatus
    events:
      - httpApi:
          path: /admin/stock-status
          method: get

  adminGetOrders:
    handler: src/handlers/adminGetOrders.adminGetOrders
    events:
      - httpApi:
          path: /admin/orders
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - x-api-key
            methods:
              - GET
              - OPTIONS

  updateOrderDetails:
    handler: src/handlers/adminUpdateOrder.adminUpdateOrder
    events:
      - httpApi:
          path: /admin/order/update/{id}
          method: patch
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - x-api-key
              - Access-Control-Allow-Origin
              - Access-Control-Allow-Headers
            methods:
              - PATCH
            

  adminLockOrder:
    handler: src/handlers/adminLockOrder.adminLockOrder
    events:
      - httpApi:
          path: /admin/order/lock/{id}
          method: patch
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - x-api-key
            methods:
              - PATCH

  adminMarkOrderAsComplete:
    handler: src/handlers/adminMarkOrderAsComplete.adminMarkOrderAsComplete
    events:
      - httpApi:
          path: /admin/order/complete/{id}
          method: patch
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - x-api-key
            methods:
              - PATCH

  deleteOrder:
    handler: src/handlers/deleteOrder.deleteOrder
    events:
      - httpApi:
          path: /order/delete/{id}
          method: delete
          cors: true

  putMenuAdmin:
    handler: src/handlers/putMenuAdmin.putMenuAdmin
    events:
      - httpApi:
          path: /admin/menu
          method: put
          cors: true
          headers:
            x-api-key: true

  postCreateUser:
    handler: src/handlers/postcreateUser.handler
    events:
      - httpApi:
          path: /user/create
          method: post
          cors: 
          origin: "*"
          headers:
            - Content-Type
            - Authorization
            - X-Requested-With
            - Access-Control-Allow-Origin
            - Access-Control-Allow-Headers


  postLoginUser:
    handler: src/handlers/postloginUser.handler
    events:
      - httpApi:
          path: /user/login
          method: post
          cors:
          origin: "*"
          headers:
            - Content-Type
            - Authorization
            - X-Requested-With
            - Access-Control-Allow-Origin
            - Access-Control-Allow-Headers

  postLoginAdmin:
    handler: src/handlers/postloginAdmin.handler
    events:
      - httpApi:
          path: /admin/login
          method: post
          cors: true

  postPayment:
    handler: src/handlers/postPayment.handler
    events:
      - httpApi:
          path: /payment
          method: post
          cors: true
          
  postLogoutUser:
    handler: src/handlers/logoutHandler.logoutHandler
    events:
      - httpApi:
          path: /user/logout
          method: post
          cors: true

  postLogoutAdmin:
    handler: src/handlers/logoutHandler.logoutHandler
    events:
      - httpApi:
          path: /admin/logout
          method: post
          cors: true

  getProfile:
    handler: src/handlers/getProfile.getProfile
    events:
      - httpApi:
          path: /user/profile/{id}
          method: get
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Authorization
            methods:
              - GET

  getFavorites:
    handler: src/handlers/Favorites.getFavoritesHandler
    events:
      - httpApi:
          path: /user/favorites/{id}
          method: get
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Authorization
            methods:
              - GET

resources:
  Resources:
    IngredientsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: IngredientsTable
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"
        BillingMode: PAY_PER_REQUEST

    MenuTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: MenuTable
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"
        BillingMode: PAY_PER_REQUEST

    PaymentsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Payments
        AttributeDefinitions:
          - AttributeName: paymentId
            AttributeType: S
        KeySchema:
          - AttributeName: paymentId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    OrdersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: OrdersTable
        AttributeDefinitions:
          - AttributeName: "orderId"
            AttributeType: "S"
          - AttributeName: "userId"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "orderId"
            KeyType: "HASH"
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes: 
          - IndexName: "UserIdIndex"
            KeySchema:
              - AttributeName: "userId"
                KeyType: "HASH"
            Projection:
              ProjectionType: "ALL" 
    
    FavoritesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: FavoritesTable
        AttributeDefinitions:
          - AttributeName: "userId"
            AttributeType: "S"
          - AttributeName: "itemId"
            AttributeType: "S"  # Lägg till itemId i AttributeDefinitions för att använda det i GSI
        KeySchema:
          - AttributeName: "userId"
            KeyType: "HASH"
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: "ItemIdIndex"
            KeySchema:
              - AttributeName: "itemId"
                KeyType: "HASH"  # itemId används som nyckel för GSI
            Projection:
              ProjectionType: "ALL"  # Inkludera alla attribut i indexet

    AboutTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: AboutTable
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"
        BillingMode: PAY_PER_REQUEST

    ContactTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ContactTable
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"
        BillingMode: PAY_PER_REQUEST

    ConfirmationTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ConfirmationTable
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"
        BillingMode: PAY_PER_REQUEST

    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: UsersTable
        AttributeDefinitions:
          - AttributeName: "userId"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "userId"
            KeyType: "HASH"
        BillingMode: PAY_PER_REQUEST

    AdminsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: AdminsTable
        AttributeDefinitions:
          - AttributeName: "adminID"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "adminID"
            KeyType: "HASH" 
        BillingMode: PAY_PER_REQUEST

custom:
  esbuild:
    target: 'node18'
    sourcemap: true
    minify: false
    bundle: true
    loader:
      '.ts': 'ts'
      '.tsx': 'tsx'

  serverless-offline:
    cors:
      allowOrigins:
        - "*"
      allowHeaders:
        - Content-Type
        - x-api-key
      allowMethods:
        - GET
        - POST
        - PATCH
        - DELETE
        - PUT
        - OPTIONS