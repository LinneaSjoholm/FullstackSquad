service: take-away-backend

frameworkVersion: "4"

provider:
  name: aws
  runtime: nodejs18.x
  region: eu-north-1
  environment:
    API_KEY: ${env:API_KEY}  

  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "*"

functions:
  # Get the menu (fetch all menu items)
  getMenu:
  
    handler: src/handlers/getMenu.getMenu  
    events:
      - httpApi:
          path: /menu
          method: get

  # Create an order
  postOrder:
    handler: src/handlers/createOrder.createOrder 
    events:
      - httpApi:
          path: /order
          method: post

  # Get an order by ID
  getOrder:
    handler: src/handlers/getOrder.getOrder  
    events:
      - httpApi:
          path: /order/{id}
          method: get

  # Get the stock status for all ingredients
  getStockStatus:
    handler: src/handlers/getStockStatus.getStockStatus
    events:
      - httpApi:
          path: /admin/stock-status
          method: get

  # Review an order before sending
  getOrderReview:
    handler: src/handlers/getOrderReview.getOrderReview  
    events:
      - httpApi:
          path: /order/{id}/review
          method: get

  # Update an order 
  postUpdateOrder:
    handler: src/handlers/updateOrder.updateOrder  
    events:
      - httpApi:
          path: /order/{id}/update
          method: post

  # Cancel an order (before it is locked)
  deleteCancelOrder:  
    handler: src/handlers/cancelOrder.cancelOrder  
    events:
      - httpApi:
          path: /order/{id}/cancel
          method: delete  

  initData:
    handler: src/handlers/initData.initData

resources:
  Resources:
    IngredientsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: IngredientsTable  # Tabell för ingredienser
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"  
        BillingMode: PAY_PER_REQUEST

    MenuTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: MenuTable  # Tabell för menu
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"
        BillingMode: PAY_PER_REQUEST

    OrdersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: OrdersTable  # Tabell för beställningar
        AttributeDefinitions:
          - AttributeName: "orderId"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "orderId"
            KeyType: "HASH"
        BillingMode: PAY_PER_REQUEST

custom:
  # Configuration for ESBuild
  esbuild:
    target: 'node18'  
    sourcemap: true  
    minify: false  
    bundle: true  
    loader:
      '.ts': 'ts'
      '.tsx': 'tsx'  

  serverless-offline:
    cors:
      allowOrigins:
        - "*"  
      allowHeaders:
        - Content-Type
        - x-api-key
      allowMethods:
        - GET
        - POST
        - DELETE  
